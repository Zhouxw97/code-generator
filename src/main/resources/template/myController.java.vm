package ${package.Controller};

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.*;

    #if(${restControllerStyle})
    #else
    import org.springframework.stereotype.Controller;
    #end
    #if(${superControllerClassPackage})
    import ${superControllerClassPackage};
    #end
    #set($domainName=$!{entity})
    #set($end=$domainName.length() - 2)
    #set($domainName=$domainName.substring(0,$end)+"DTO" )
    #set($domainQueryName=$domainName.substring(0,$end)+"QueryDTO" )
    #set($dtoPackage=$!{package.Entity})
    #set($dtoPackage=$dtoPackage.replace("entity","dto" ))
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package.Service}.${table.serviceName};
import ${cfg.packageDto}.${domainName};
import ${cfg.packageDto}.${domainQueryName};
import ${package.Entity}.${entity};

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;

#set($domainName=$!{entity})
#set($end = $domainName.length() - 2)
#set($controllerDomain=$domainName.substring(0,$end))
#set($domainName=$domainName.substring(0,$end)+"DTO" )
#set($domainQueryName=$domainName.substring(0,$end)+"QueryDTO" )

#set ($camelDtoName = $!{domainName})
#set ($camelDtoName = $camelDtoName.substring(0,1).toLowerCase() + $camelDtoName.substring(1,$camelDtoName.length()))
#set ($camelQueryDtoName = $domainQueryName.substring(0,1).toLowerCase() + $domainQueryName.substring(1,$domainQueryName.length()))

#set ($controllerDomain = $controllerDomain.substring(0,1).toLowerCase() + $controllerDomain.substring(1,$controllerDomain.length()))


#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyPropertyType=${field.propertyType})
    #end
#end
/**
 *
 * @author ${author}
 * @since ${date}
 */
@Api(tags = "$!{table.comment}相关接口")
    #if(${restControllerStyle})
    @RestController
    #else
    @Controller
    #end
@RequestMapping("#if(${cfg.moduleName})/${cfg.moduleName}#end/#if(${controllerMappingHyphenStyle})
    ${controllerMappingHyphen}#else${controllerDomain}#end")
    #if(${superControllerClass})
            public class ${table.controllerName} extends ${superControllerClass} {
    #else
            public class ${table.controllerName} {
    #end

        @Autowired
    ${table.serviceName} ${controllerDomain}Service;

        /**
         * 分页查询数据
         *
         * @param ${camelQueryDtoName} 请求参数
         * @param currentPage      页数
         * @param pageSize         分页大小
         * @return com.baomidou.mybatisplus.core.metadata.IPage 分页对象
         * @author ${author}
         * @since ${date}
        */
        @ApiOperation(value = "分页查询数据")
        @ApiImplicitParams({
                @ApiImplicitParam(name = "currentPage" , value = "页数" , dataType = "int" , paramType = "query"),
                @ApiImplicitParam(name = "pageSize" , value = "分页大小" , dataType = "int" , paramType = "query")
        })
    #if(${restControllerStyle})
    #else
            @ResponseBody
    #end
@GetMapping
        public IPage<${domainName}>getByPage(${domainQueryName} ${camelQueryDtoName},
        @RequestParam(required = false, defaultValue = "1")int currentPage,
        @RequestParam(required = false, defaultValue = "10")int pageSize){
        Page<${entity}>page=new Page<>(currentPage,pageSize);
        ${domainName} ${camelDtoName} = new ${domainName}();
        BeanUtils.copyProperties(${camelQueryDtoName}, ${camelDtoName});
        return ${controllerDomain}Service.selectPageBysql(page,${camelDtoName});
        }

/**
 * 根据ID获取数据
 *
 * @param id 数据主键ID
 * @return ${cfg.packageDto}.${domainName}
 * @author ${author}
 * @since ${date}
 */
@ApiOperation(value = "根据ID获取数据")
@ApiImplicitParam(name = "id" , value = "ID" , dataType = "${keyPropertyType}" , paramType = "path")
    #if(${restControllerStyle})
    #else
    @ResponseBody
    #end
@GetMapping(value = "/{id}")
public ${domainName} getById(@PathVariable("id") @NotNull(message = "id不能为空") ${keyPropertyType} id){
        return ${controllerDomain}Service.getById(id);
        }

/**
 * 新增数据
 *
 * @param ${camelDtoName} 需要保存的DTO
 * @return int
 * @author ${author}
 * @since ${date}
 */
@ApiOperation(value = "新增数据")
@ApiImplicitParam(name = "${camelDtoName}" , value = "请求体" , dataType = "${domainName}" , paramType = "body")
    #if(${restControllerStyle})
    #else
    @ResponseBody
    #end
@PostMapping
public int insert(@Valid @RequestBody ${domainName} ${camelDtoName}){
        return ${controllerDomain}Service.insert( ${camelDtoName});
        }

/**
 * 根据ID修改数据
 *
 * @param id 需要修改数据的ID
 * @param ${camelDtoName} 需要保存的DTO
 * @return int
 * @author ${author}
 * @since ${date}
 */
@ApiOperation(value = "根据ID修改数据")
@ApiImplicitParams({
        @ApiImplicitParam(name = "id" , value = "ID" , dataType = "${keyPropertyType}" , paramType = "path"),
        @ApiImplicitParam(name = "${camelDtoName}" , value = "请求体" , dataType = "${domainName}" , paramType = "body")
})
    #if(${restControllerStyle})
    #else
    @ResponseBody
    #end
@PutMapping(value = "/{id}")
public int update(@Valid @RequestBody ${domainName} ${camelDtoName},
@PathVariable("id") @NotNull(message = "id不能为空") ${keyPropertyType} id){
        return ${controllerDomain}Service.update(id,${camelDtoName});
        }

/**
 * 根据ID删除数据
 *
 * @param id 需要修改数据的ID
 * @author ${author}
 * @since ${date}
 */
@ApiOperation(value = "根据ID删除数据")
@ApiImplicitParam(name = "id" , value = "ID" , dataType = "${keyPropertyType}" , paramType = "path")
    #if(${restControllerStyle})
    #else
    @ResponseBody
    #end
@DeleteMapping(value = "/{id}")
public int deleteById(@PathVariable("id") @NotNull(message = "id不能为空") ${keyPropertyType} id){
        return ${controllerDomain}Service.deleteById(id);
        }

/**
 * 根据ID批量删除数据
 *
 * @param ids 需要修改数据的ID集合
 * @author ${author}
 * @since ${date}
 */
@ApiOperation(value = "根据ID批量删除数据")
@ApiImplicitParam(name = "ids" , value = "IDs" , dataType = "String" , paramType = "path")
    #if(${restControllerStyle})
    #else
    @ResponseBody
    #end
@DeleteMapping(value = "/batch/{ids}")
public int deleteByIds(@PathVariable("ids") @NotBlank(message = "ids不能为空") String ids){
        return ${controllerDomain}Service.deleteBatchIds(ids);
        }

        }