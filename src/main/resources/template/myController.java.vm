package ${package.Controller};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;

import org.springframework.web.bind.annotation.*;

    #if(${restControllerStyle})
    #else
    import org.springframework.stereotype.Controller;
    #end
    #if(${superControllerClassPackage})
    import ${superControllerClassPackage};
    #end
    #set($domainName=$!{entity})
    #set($end=$domainName.length() - 2)
    #set($domainName=$domainName.substring(0,$end)+"DTO" )
    #set($dtoPackage=$!{package.Entity})
    #set($dtoPackage=$dtoPackage.replace("entity","dto" ))
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${package.Service}.${table.serviceName};
import ${cfg.packageDto}.${domainName};
import ${package.Entity}.${entity};

#set($domainName=$!{entity})
#set($end = $domainName.length() - 2)
#set($controllerDomain=$domainName.substring(0,$end))
#set($domainName=$domainName.substring(0,$end)+"DTO")


#set ($camelDtoName = $!{domainName})
#set ($camelDtoName = $camelDtoName.substring(0,1).toLowerCase() + $camelDtoName.substring(1,$camelDtoName.length()))

#set ($controllerDomain = $controllerDomain.substring(0,1).toLowerCase() + $controllerDomain.substring(1,$controllerDomain.length()))


#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyPropertyType=${field.propertyType})
    #end
#end
/**
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(!${cfg.moduleName} || ${cfg.moduleName}!="")/${cfg.moduleName}#end/#if(${controllerMappingHyphenStyle})
    ${controllerMappingHyphen}#else${controllerDomain}#end")
    #if(${superControllerClass})
            public class ${table.controllerName} extends ${superControllerClass} {
    #else
            public class ${table.controllerName} {
    #end

        @Autowired
        ${table.serviceName} ${controllerDomain}Service;

        /**
         * 分页查询数据
         *
    #foreach($field in ${table.fields})
    * @param ${field.propertyName} ${field.comment}
    #end
         * @param currentPage 页数
         * @param pageSize 分页大小
         * @return com.baomidou.mybatisplus.core.metadata.IPage 分页对象
         * @author ${author}
         * @since ${date}
        */
    #if(${restControllerStyle})
    #else
            @ResponseBody
    #end
        @GetMapping
        public IPage<${domainName}>getByPage(
#foreach($field in ${table.fields})
@RequestParam(value="${field.propertyName}",required = false) ${field.propertyType} ${field.propertyName},
#end
        @RequestParam("currentPage")int currentPage,
        @RequestParam("pageSize")int pageSize){
        Page<${entity}>page=new Page(currentPage,pageSize);

        ${domainName} ${camelDtoName} =new ${domainName}();
        #foreach($field in ${table.fields})
            #if(${field.propertyType.equals("boolean")} || ${field.propertyType.equals("Boolean")})
                #set($setprefix="setIs")
            #else
                #set($setprefix="set")
            #end
            ${camelDtoName}.${setprefix}${field.capitalName}(${field.propertyName});
        #end
        return ${controllerDomain}Service.selectPageBysql(page,${camelDtoName});
        }

/**
 * 进行数据修改
 *
 * @param id 数据主键ID
 * @return ${cfg.packageDto}.${domainName}
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
#else
@ResponseBody
#end
@GetMapping(value = "/{id}")
public ${domainName} getById(@PathVariable("id") ${keyPropertyType} id){
        return ${controllerDomain}Service.getById(id);
        }

/**
 * 进行数据新增
 *
 * @param ${camelDtoName} 需要保存的DTO
 * @return int
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
#else
@ResponseBody
#end
@PostMapping
@ResponseStatus(HttpStatus.CREATED)
public int insert(@RequestBody ${domainName} ${camelDtoName}){
        return ${controllerDomain}Service.insert( ${camelDtoName});
        }

/**
 * 进行数据修改
 *
 * @param id 需要修改数据的ID
 * @param ${camelDtoName} 需要保存的DTO
 * @return int
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
#else
@ResponseBody
#end
@PutMapping(value = "/{id}")
@ResponseStatus(HttpStatus.CREATED)
public int update(@PathVariable("id") ${keyPropertyType} id,@RequestBody ${domainName} ${camelDtoName}){
        return ${controllerDomain}Service.update(id,${camelDtoName});
        }

/**
 * 根据id删除对象
 *
 * @param id 需要修改数据的ID
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
#else
@ResponseBody
#end
@DeleteMapping(value = "/{id}")
@ResponseStatus(HttpStatus.NO_CONTENT)
public boolean deleteById(@PathVariable("id") ${keyPropertyType} id){
    ${controllerDomain}Service.deleteById(id);
        return true;
        }

        /**
         * 根据IDs批量删除对象
         *
         * @param ids 需要修改数据的ID集合
         * @author ${author}
         * @since ${date}
         */
        #if(${restControllerStyle})
        #else
        @ResponseBody
        #end
        @DeleteMapping(value = "/batch/{ids}")
        @ResponseStatus(HttpStatus.NO_CONTENT)
        public boolean deleteByIds(@PathVariable("ids") String ids){
            ${controllerDomain}Service.deleteBatchIds(ids);
                return true;
                }

}