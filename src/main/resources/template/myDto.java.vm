package ${cfg.packageDto};

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import ${cfg.superDtoClass};
import com.yonyou.cyx.framework.bean.entity.base.BasePO;
import com.yonyou.cyx.function.utils.bean.BeanMapperUtil;
import com.yonyou.cyx.function.utils.jsonserializer.localdatetime.JsonLocalDateTimeDeserializer;
import com.yonyou.cyx.function.utils.jsonserializer.localdatetime.JsonLocalDateTimeSerializer;
import io.swagger.annotations.ApiModelProperty;

import java.io.Serializable;
import java.time.LocalDateTime;


/**
 * $!{table.comment}
 *
 * @author ${author}
 * @since ${date}
 */
    #set($domainName=$!{entity})
    #set($end = $domainName.length() - 2)
    #set($domainName=$domainName.substring(0,$end))

    #set($superDtoClass=$cfg.superDtoClass)
    #set($dtoBegin=$superDtoClass.lastIndexOf('.')+1)
    #set($dtoEnd=$superDtoClass.length())
    #set($baseDto=$superDtoClass.substring($dtoBegin,$dtoEnd))

public class ${domainName}Dto extends ${baseDto} implements Serializable {
    private static final long serialVersionUID = 1L;

## ----------  BEGIN 字段循环遍历  ----------
    #foreach($field in ${table.fields})
    #if("$!field.comment" != "")
    /**
     * ${field.comment}
     */
    #end
        #if(${field.propertyType.equals("LocalDateTime")})
    @JsonDeserialize(using = JsonLocalDateTimeDeserializer.class)
    @JsonSerialize(using = JsonLocalDateTimeSerializer.class)
    @ApiModelProperty(value = "${field.comment}" , name = "${field.propertyName}")
    private ${field.propertyType} ${field.propertyName};

        #else
    @ApiModelProperty(value = "${field.comment}" , name = "${field.propertyName}")
    private ${field.propertyType} ${field.propertyName};

        #end
    #end

    public ${domainName}Dto() {
        super();
    }
## ----------  END 字段循环遍历  ----------

    #foreach($field in ${table.fields})
        #if(${field.propertyType.equals("boolean")} || ${field.propertyType.equals("Boolean")})
            #set($getprefix="getIs")
            #set($setprefix="setIs")
        #else
            #set($getprefix="get")
            #set($setprefix="set")
            #if(${field.keyFlag})
                #set($keyPropertyName=${field.propertyName})
            #end
        #end

    public ${field.propertyType} ${getprefix}${field.capitalName}(){
        return ${field.propertyName};
    }


    public void  ${setprefix}${field.capitalName}(${field.propertyType} ${field.propertyName}) {
        this.${field.propertyName} = ${field.propertyName};
        #if(${entityBuilderModel})
            return this;
        #end
    }
    #end

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("${domainName}Dto{")
            #foreach($field in ${table.fields})
                #if($!{velocityCount}==1)
                        .append("${field.propertyName}=").append(${field.propertyName})
                #else
                        .append(", ${field.propertyName}=").append(${field.propertyName})
                #end
            #end
                .append("}");
        return sb.toString();
    }

    /**
     * 将DTO 转换为PO
     * //对某个对象属性进行赋值
     * //BeanMapperUtil.populateValueByMethod(transPO,"setXxx",this.getXxx);
     * @param poClass  需要转换的poClass
     * @author ${author}
     * @since 2018/7/22 0022
     */
    @Override
    public <T extends BasePO> T transDtoToPo(Class<T> poClass) {
        return super.transDtoToPo(poClass);
    }

    /**
     * 将DTO 转换为PO
     * BeanMapperUtil.populateValueByMethod(transPO,"setXxx",this.getXxx);
     * @param po 需要转换的对象
     * @author ${author}
     * @since 2018/7/22 0022
     */
    public <T extends BasePO> void transDtoToPo(T po) {
        BeanMapperUtil.copyProperties(this, po, "${keyPropertyName}");
    }

}
