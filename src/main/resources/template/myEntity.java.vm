package ${package.Entity};

import com.yonyou.cyx.framework.bean.dto.base.BaseDTO;

    #foreach($pkg in ${table.importPackages})
import ${pkg};
    #end

import com.yonyou.cyx.function.utils.bean.BeanMapperUtil;

import java.io.Serializable;
import java.time.LocalDateTime;

/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${entityLombokModel})
@Data
    #if(${superEntityClass})
    @EqualsAndHashCode(callSuper = true)
    #else
    @EqualsAndHashCode(callSuper = false)
    #end
@Accessors(chain = true)
#end
#if(${table.convert})
@TableName("${table.name}")
#end
#if(${superEntityClass})
public class ${entity} extends ${superEntityClass}#if(${activeRecord})<${entity}>#end {
#elseif(${activeRecord})
public class ${entity} extends Model<${entity}> {
#else
public class ${entity} implements Serializable{
#end

    private static final long serialVersionUID=1L;
## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
    #end
#if("$!field.comment" != "")

    /**
     * ${field.comment}
     */
#end
#if(${field.keyFlag})
    ## 主键
#if(${field.keyIdentityFlag})
    #if(${field.propertyType}=="String")
    @TableId(value = "${field.name}", type = IdType.INPUT)
    #else
    @TableId(value = "${field.name}", type = IdType.AUTO)
    #end
    #elseif(!$null.isNull(${idType}) && "$!idType" != "")
    @TableId(value = "${field.name}", type = IdType.${idType})
    #elseif(${field.convert})
    @TableId("${field.name}")
#end
    ## 普通字段
    #elseif(${field.fill})
    ## -----   存在字段填充设置   -----
    #if(${field.convert})
    @TableField(value = "${field.name}", fill = FieldFill.${field.fill})
    #else
    @TableField(fill = FieldFill.${field.fill})
    #end
    #else
    @TableField("${field.name}")
#end

## 逻辑删除注解
    #if(${logicDeleteFieldName}==${field.name})
    @TableLogic
    #end
private ${field.propertyType} ${field.propertyName};
#end

    public ${entity}(){
        super();
    }
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
    #foreach($field in ${table.fields})
        #if(${field.propertyType.equals("boolean")} || ${field.propertyType.equals("Boolean")})
            #set($getprefix="getIs")
            #set($setprefix="setIs")
        #else
            #set($getprefix="get")
            #set($setprefix="set")
        #end

    public ${field.propertyType} ${getprefix}${field.capitalName}(){
        return ${field.propertyName};
    }

    #if(${entityBuilderModel})
    public ${entity} ${setprefix}${field.capitalName}(${field.propertyType} ${field.propertyName}){
        #else
    public void ${setprefix}${field.capitalName}(${field.propertyType} ${field.propertyName}) {
    #end
        this.${field.propertyName} = ${field.propertyName};
        #if(${entityBuilderModel})
        return this;
        #end
    }
    #end
#end

#if(${entityColumnConstant})
    #foreach($field in ${table.fields})
    public static final String ${field.name.toUpperCase()} ="${field.name}";

    #end
#end
#if(${activeRecord})
    @Override
    protected Serializable pkVal(){
    #if(${keyPropertyName})
        return this.${keyPropertyName};
    #else
        return null;
    #end
    }

#end
#if(!${entityLombokModel})
@Override
    public String toString(){
        return"${entity}{" +
    #foreach($field in ${table.fields})
        #if($!{velocityCount}==1)
                "${field.propertyName}=" + ${field.propertyName} +
        #else
                ", ${field.propertyName}=" + ${field.propertyName} +
        #end
    #end
        "}";
    }
#end

/**
 * 将PO 信息转化为DTO
 *
 * @param dtoClass 需要进行转换的dtoClass
 * @author ${author}
 * @since 2018/7/22 0022
 */
    public <T extends BaseDTO> T transPoToDto(Class<T> dtoClass) {
        return super.transDtoToPo(dtoClass);
    }

/**
 * 将PO 信息转化为DTO
 *
 * @param dto 需要进行转换的dto
 * @author ${author}
 * @since 2018/7/22 0022
 */
    public <T extends BaseDTO> void transPoToDto(T dto){
        BeanMapperUtil.copyProperties(this,dto,"${keyPropertyName}");
    }

}
